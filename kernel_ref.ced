;******************************************************************************
;
;	Arquivo de Referencia para o desenvolvimento do kernel.
;
;	Versao: 2023.1
;
;	Areas de memoria
;
;	0000 - 7FFF		_KERNEL
;					area de Kernel para implementacao dos alunos
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funcoes do kernel
;					*** CUIDADO! Esse vetor esta no meio da area de codigo ***
;
;	8000 - FF7F		_APP
;					Area onde sera colocado o programa de aplicacao.
;					Esse programa vai fazer o acesso aos perifericos e interrupcoes, atraves das funcoes do Kernel.
;
;	FF80 - FFBF 	_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000	
_VETTAB:	equ	h0100			;tabela de vetores
_RESET:		equ	_VETTAB+H0100	
_APP:		equ	h8000			;programa de aplicacao
_IOAREA16:	equ	hFF80			
_IOAREA08:	equ	hFFC0			

;
;------------------------------------------------------------------------------
;	Area reservada para os perifericos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		org		_IOAREA16
	    daw		[31]
IVET:	dw		0			; Vetor de interrupcao

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]
TIMDT:	db		0			; Registro de programacao do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]		; Portas de acesso ao visor


;		
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET

;
;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funcoes do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		
		dw		kbhit			; WORD	kbhit(void)
		dw		getchar			; WORD	getchar(void)
		dw		putchar			; WORD	putchar(WORD area, BYTE caractere)
								; WORD	putchar(WORD area, BYTE caractere, WORD pos)
		dw		putmsg			; WORD	putmsg(WORD area, BYTE *msg)
								; WORD	putmsg(WORD area, BYTE *msg, WORD pos)
		dw		startline		; WORD	startline(BYTE *buffer, WORD max)
		dw		getline			; WORD	getline(WORD param)
		
;	
;------------------------------------------------------------------------------
;	Codigo de RESET (BOOT) do processador/interrupcao
;------------------------------------------------------------------------------
		org		_reset
; 1) Desabilitar o sistema de interrupcoes
		clr		ints
		clr		inte
; 2) Inicializar o stack pointer (SP = R6)
		mov		#h7fff,r6
; 3) Inicializar as variaveis internas usadas pelo sistema de interrupcoes e perifericos (IVET, INTE, etc.)
		mov		#isr,ivet
; 4) Inicializar as variaveis internas do kernel
		
; 5) Inicializar o teclado zerando o byte de estado (TECST, endereco 65498)
		clr 	tecst
; 6) Inicializar o timer
		mov		#10,timdt
; 7) Limpar o visor
		jsr	r7,clrVisorEsq
		jsr	r7,clrVisorDir
; 8) Habilitar interrupcoes
		mov 	#h83,inte				;TECLADO E TIMER
; 9) Retornar para o programa de aplicacao com um desvio para o endereco _APP da memoria
		jmp		_app

;------------------------------------------------------------------------------
;------------------------ VARIAVEIS INTERNAS DO KERNEL ------------------------
;------------------------------------------------------------------------------
tecBuffer:		db	0			;variavel para armazenar tecdt fora da interrupcao
cursor:			dw	0			;cursor para percorrer visor

;msg:			daw		'P','a','b','l','o','D','i','e','d','r','i','c','h','P','e','r','a','l','t','a','0','0','2','8','7','7','2','3',0
;msg1:			dab		CR, LF, 'putmsg-E', 0
;msg2:			dab		FF, 'putmsg-D', 0
;msg3:			dab		CR, LF, 0
;msg4:			dab		FF, 0
;msg5:			dab		'okok',CR,LF,'teste', 0
;msg6:			dab		'ok',FF,'2teste',0

startlineFlag:	db	0			;variavel que sinaliza se startline está ligada ou desligada
slBuf:			dab	[25]		;vetor que armazena a string de startline inserida no visor [não implementado]
bufferPos:		db  0			;posicao para percorrer slBuf [não implementado]
startlineMax:	dw  0			;maximo de caracteres em startline
getlineParam:	dw	0			;indice do parametro da funcao getline
startlineTimer:	dw	0			;representa timer do startline
startlineSize:	dw	0			;representa tamanho do buffer de startline

FF:				equ		H0C		;form feed
CR:				equ		H0D		;carriage return
LF:				equ		H0A		;line feed
;
;;------------------------------------------------------------------------------
;;-------------------------------- INTERRUPCAO ---------------------------------
;;------------------------------------------------------------------------------
isr:
	;;desativa interrupcao e salva todos registradores na pilha
		clr		inte
		mov		r0,-(r6)	
		mov		r1,-(r6)
		mov		r2,-(r6)
		mov		r3,-(r6)
		mov		r4,-(r6)
		mov		r5,-(r6)
	;;verifica se é interrupcao do timer
		mov		ints,r3
		asr		r3
		bcs		isrTimer
isrTimerFim:
	;;verifica se é interrupcao do teclado
		asr		r3
		bcs		isrTeclado
		jmp		isrFimNoTecNoTim
isrTimer:
	;;testa se startline está ativo, se estiver ativo incrementa timer de startline
		mov		startlineFlag,r1
		tst		r1
		beq		isrTimerFim
		add		#1,startlineTimer
		jmp		isrTimerFim
isrTeclado:
	;;testa se startline está ativo
		mov		startlineFlag,r1
		tst		r1
		bne		startlineOn
		mov		tecdt,tecBuffer
		clr		tecdt
		jmp		isrFim
startlineOn:
	;;salva em r2 posicao atual do visor
		mov		#visor,r2
		add		cursor,r2
	;;testa se a string chegou ao limite no visor esquerdo
		cmp		r2,#65524
		beq		startlineOnFim
	;;testa se a string chegou ao maximo solicitado na entrada da função startline
		cmp		cursor,startlineMax
		beq		startlineOff 
	;;incrementa cursor no visor e testa se usuario digitou a tecla enter
		add		#1,cursor			
		cmp		tecdt,#h0d
		bne		startlineInsere
	startlineOff:
	;;label para desligamento de startline 
		cmp		tecdt,#8
		bne		startlineDesliga
		sub		#1,startlineSize
		mov		#h20,-1(r2)
		sub		#1,cursor
		jmp		startlineOnFim
		startlineDesliga:
		mov		#0,startlineFlag
		jmp		startlineOnFim
	startlineInsere:
	;;testa se foi teclado backspace
		cmp		tecdt,#8
		bne		startlineInsereChar
	;;testa se não há nenhum caractere no visor
		cmp		startlineSize,#0
	;;caso visor esteja vazio, impede que backspace faça algo
		bne		sizeNotZero
		mov		#0,cursor
		jmp		startlineOnFim
	sizeNotZero:
	;;caso visor não esteja vazio, deleta tecla do cursor atual e decrementa cursor
		sub		#1,startlineSize
		dec		r2
		mov		#h20,(r2)
		sub		#2,cursor
		jmp		startlineOnFim
	startlineInsereChar:
	;;else { insere tecla no visor  }
		mov		tecdt,(r2)
		add		#1,startlineSize
startlineOnFim:
		clr		tecdt
		jmp		isrFim
isrFimNoTecNoTim:
	;;limpa tecBuffer caso não tenha tecla digitada
		mov		#0,tecBuffer
isrFim:	
	;finaliza interrupcao e recupera através da pilha todos dados dos registradores
		clr		tecst
		clr		ints
		mov		(r6)+,r5	
		mov		(r6)+,r4
		mov		(r6)+,r3
		mov		(r6)+,r2
		mov		(r6)+,r1
		mov		(r6)+,r0
		mov 	#h83,inte				;ativa interrupcao de teclado e timer

		rti
;		
;------------------------------------------------------------------------------
; WORD	kbhit(void)		
;------------------------------------------------------------------------------
kbhit:
	;retorno:
	;r0 = 1 -> não há tecla
	;r0 = 0 -> há tecla
		mov		#1,r0
		tst		tecBuffer
		beq		kbhitFim
		mov		#0,r0
	kbhitFim:
		rts		r7
;		
;------------------------------------------------------------------------------
; WORD	getchar(void)
;------------------------------------------------------------------------------
getchar:
	getcharLoop:
	;;enquanto não for digitado alguma tecla não sai desse loop
		jsr		r7,kbhit
		tst		r0
		bne		getcharLoop
	;;retorna tecla em r0 e limpa buffer da tecla
		mov		tecBuffer,r0
		clr		tecBuffer
		rts		r7
;		
;------------------------------------------------------------------------------
; WORD	putchar(WORD area, BYTE caractere)
; WORD	putchar(WORD area, BYTE caractere, WORD pos)
;------------------------------------------------------------------------------
putchar:		
		mov		r1,-(r6)
		mov		#visor,r1
	;;trata caracteres de controle
		cmp		r4,#h08 ;backspace
		beq		bspJmp
		cmp		r4,#h0d ;carriage return
		beq		crJmp
		cmp		r4,#h0a ;line feed
		beq		lfJmp
		cmp		r4,#h0c ;form feed
		beq		ffJmp
		jmp		jmpCaracteresControle
	bspJmp:	;trata backspace
	;;decrementa cursor caso não esteja na primeira posição
		tst		cursor
		beq		putcharFim
		sub		#1,cursor
		jmp		putcharFim
	crJmp:	;trata carriage return
	;;posiciona cursor na primeira posicao
		mov		#0,cursor
		jmp		putcharFim
	lfJmp:	;trata line feed
	;;limpa area esquerad sem alterar cursor
		jsr		r7,clrVisorEsq
		jmp		putcharFim
	ffJmp:	;trata form feed
	;;limpa area direita
		jsr		r7,clrVisorDir
		jmp		putcharFim
	jmpCaracteresControle:
	;;verifica se caractere esta entre h20 e h7a
		cmp		r4,#h20
		blt		putcharFimErro
		cmp		r4,#h7a
		bgt		putcharFimErro
	;;testa se caractere será inserido na area esquerda ou direita
		tst		r5
		beq		areaEsq
		jmp		areaDir
	areaEsq:
	;;testa se area esquerda chegou no limite
		cmp		cursor,#24
		beq		putcharFimErro
	;;insere caractere na posicao do cursor e incrementa cursor
		add		cursor,r1
		mov		r4,(r1)
		add		#1,cursor
		jmp		putcharFim
	areaDir:
	;;testa se posicao da area direita está correta
		cmp		r3,#0
		blt		putcharFimErro
		cmp		r3,#11
		bgt		putcharFimErro
	;;posiciona cursor na area direita e insere caractere
		add		#24,r1
		add		r3,r1
		mov		r4,(r1)
		add		#1,r3
		jmp		putcharFim
	putcharFimErro:
	;;retorna 1 em r0 caso haja algum erro
		mov		#1,r0
	putcharFim:
	;;retorna 0 em r0 caso não haja erro
		mov		#0,r0
		mov		(r6)+,r1
		rts		r7
;		
;------------------------------------------------------------------------------
; WORD	putmsg(WORD area, BYTE *msg)
; WORD	putmsg(WORD area, BYTE *msg, WORD pos)
;------------------------------------------------------------------------------
putmsg:
		mov		r1,-(r6)
	;;move ponteiro da string msg para r1 e decrementa
		mov		r4,r1
		dec		r1
	putmsgLoop:
	;;move caractere atual da string para registrador de entrada do putchar
		mov		(r1),r4
	;;incrementa posicao do vetor msg
		inc		r1
	;;imprime novo caractere caso caractere seja diferente de zero
		and		#hff,r4
		cmp		r4,#0
		beq		putmsgFim
		jsr		r7,putchar
		jmp		putmsgLoop
	putmsgFim:
	;;encerra putmsg
		mov		(r6)+,r1
		rts		r7
;
;------------------------------------------------------------------------------
; WORD	startline(BYTE *buffer, WORD max)
;------------------------------------------------------------------------------
startline:
		mov		r4,startlineMax		;tamanho maximo solicitado na string digitada durante startline
		mov		#1,startlineFlag	;ativa startline
		mov		#0,startlineSize	;zera tamanho da string de startline
		mov		#0,startlineTimer	;reseta timer
		rts		r7
;		
;------------------------------------------------------------------------------
; WORD	getline(WORD param)
;------------------------------------------------------------------------------
getline:
		mov		r1,-(r6)
		mov		r2,-(r6)
	;;r5 == param_reset ?
		cmp		r5,#0				
		bne		getlineJmp1
		mov		startlineFlag,r1
		tst		r1
		beq		getlineErro
		mov		#0,startlineFlag
		jmp		getlineFim
	getlineJmp1:
	;;r5 == param_finished ?
		cmp		r5,#1				
		bne		getlineJmp2
		cmp		startlineFlag,#0
		beq		getlineFim
		jmp		getlineErro
	getlineJmp2:
	;;r5 == param_time ?
		cmp		r5,#2	
		bne		getlineJmp3
		mov		startlineTimer,r0
		mov		(r6)+,r2
		mov		(r6)+,r1
		rts		r7
	getlineJmp3:
	;;r5 == param_buffer ? [não implementado]
		cmp		r5,#3	
		bne		getlineJmp4
		mov		(r6)+,r2
		mov		(r6)+,r1
		rts		r7
	getlineJmp4:
	;;r5 == param_size ?
		cmp		r5,#4
		bne		getlineErro
		mov		startlineSize,r0
		mov		(r6)+,r2
		mov		(r6)+,r1
		rts		r7
	getlineErro:
	;;retorno de erro
		mov		(r6)+,r2
		mov		(r6)+,r1
		mov		#65535,r0
		rts		r7
	getlineFim:
	;;retorno de param_reset e param_finished
		mov		(r6)+,r2
		mov		(r6)+,r1
		mov		#0,r0
		rts		r7
;		
;------------------------------------------------------------------------------
; void	clrVisorEsq()
;------------------------------------------------------------------------------
clrVisorEsq:
	;;limpa visor na area esquerda
		mov		' ',65500
		mov		' ',65501
		mov		' ',65502
		mov		' ',65503
		mov		' ',65504
		mov		' ',65505
		mov		' ',65506
		mov		' ',65507
		mov		' ',65508
		mov		' ',65509
		mov		' ',65510
		mov		' ',65511
		mov		' ',65512
		mov		' ',65513
		mov		' ',65514
		mov		' ',65515
		mov		' ',65516
		mov		' ',65517
		mov		' ',65518
		mov		' ',65519
		mov		' ',65520
		mov		' ',65521
		mov		' ',65522
		mov		' ',65523
		rts 	r7
;		
;------------------------------------------------------------------------------
; void	clrVisorDir()
;------------------------------------------------------------------------------
clrVisorDir:
	;;limpa visor na area direita
		mov		' ',65524
		mov		' ',65525
		mov		' ',65526
		mov		' ',65527
		mov		' ',65528
		mov		' ',65529
		mov		' ',65530
		mov		' ',65531
		mov		' ',65532
		mov		' ',65533
		mov		' ',65534
		mov		' ',65535
		rts 	r7

